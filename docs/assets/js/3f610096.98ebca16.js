"use strict";(self.webpackChunkcompose_destinations_docs=self.webpackChunkcompose_destinations_docs||[]).push([[199],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7615:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={sidebar_position:9},s="Deep links",p={unversionedId:"deeplinks",id:"deeplinks",title:"Deep links",description:"Deep links to screen Composables are supported with Compose Destinations.",source:"@site/docs/deeplinks.md",sourceDirName:".",slug:"/deeplinks",permalink:"/deeplinks",editUrl:"https://github.com/raamcosta/compose-destinations-docs/edit/main/docusaurus/docs/deeplinks.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Styles and Animations",permalink:"/styles-and-animations"},next:{title:"Code generation configs",permalink:"/codegenconfigs"}},u=[{value:"Screens with mandatory Parcelable/Serializable navigation arguments",id:"screens-with-mandatory-parcelableserializable-navigation-arguments",children:[],level:2}],c={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deep-links"},"Deep links"),(0,a.kt)("p",null,"Deep links to screen Composables are supported with Compose Destinations."),(0,a.kt)("p",null,"You can define deep links to a destination like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Destination(\n  route = "user",\n  deepLinks = [\n    DeepLink(\n      uriPattern = "https://myapp.com/user/{id}"\n    )\n  ]\n)\n@Composable\nfun UserScreen(\n  navigator: DestinationsNavigator,\n  id: Int\n)\n')),(0,a.kt)("p",null,"You can also use the placeholder suffix ",(0,a.kt)("inlineCode",{parentName:"p"},"FULL_ROUTE_PLACEHOLDER")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"uriPattern"),". In the code generation process, it will be replaced with the full route of the destination which contains all the destination arguments. So, for example, this would result in the same ",(0,a.kt)("inlineCode",{parentName:"p"},"uriPattern")," as the above example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Destination(\n  route = "user",\n  deepLinks = [\n    DeepLink(\n      uriPattern = "https://myapp.com/$FULL_ROUTE_PLACEHOLDER"\n    )\n  ]\n)\n@Composable\nfun UserScreen(\n  navigator: DestinationsNavigator,\n  id: Int\n)\n')),(0,a.kt)("p",null,"Besides ",(0,a.kt)("inlineCode",{parentName:"p"},"uriPattern"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"DeepLink")," class has other ways of defining it like ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mimetype"),". You can read more in ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/compose/navigation#deeplinks"},"official documentation"),"."),(0,a.kt)("h2",{id:"screens-with-mandatory-parcelableserializable-navigation-arguments"},"Screens with mandatory Parcelable/Serializable navigation arguments"),(0,a.kt)("p",null,"If you have a screen that declares a mandatory navigation argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"Parcelable"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"Serializable")," type, you need to be explicit about how that type is represented in the deep link route you are expecting.\nFor this, you need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"@NavTypeSerializer")," annotation in a class that implements either ",(0,a.kt)("inlineCode",{parentName:"p"},"ParcelableNavTypeSerializer<YOUR_NAV_ARG_TYPE> ")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"SerializableNavTypeSerializer<YOUR_NAV_ARG_TYPE>"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'data class Things(\n    val thingOne: String,\n    val thingTwo: String\n)\n\n// _________________________\n\n@NavTypeSerializer\nclass ThingsNavTypeSerializer : ParcelableNavTypeSerializer<Things> {\n\n    override fun toRouteString(value: Things): String {\n        return "${value.thingOne};${value.thingTwo}"\n    }\n\n    override fun fromRouteString(routeStr: String, jClass: Class<out Things>): Things {\n        return routeStr.split(";").run {\n            Things(get(0), get(1))\n        }\n    }\n}\n')),(0,a.kt)("p",null,"After this, you'd be able to use a deep link for this destination:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Destination(\n    deepLinks = [\n        DeepLink(uriPattern = "https://myapp.com/things_screen/{things}")\n    ]\n)\n@Composable\nfun ThingsScreen(\n    things: Things\n) {\n    //...\n}\n')),(0,a.kt)("p",null,"And the link that would lead users to this screen would be ",(0,a.kt)("inlineCode",{parentName:"p"},"https://myapp.com/things_screen/thingOne;thingTwo"),". Given the above ",(0,a.kt)("inlineCode",{parentName:"p"},"@NavTypeSerializer")," annotated class, the navigation argument received would be created by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"fromRouteString")," method (so in the end, it would be ",(0,a.kt)("inlineCode",{parentName:"p"},'Things("thingOne", "thingTwo")'),")."))}d.isMDXComponent=!0}}]);