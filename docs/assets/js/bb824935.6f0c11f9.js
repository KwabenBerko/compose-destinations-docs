"use strict";(self.webpackChunkcompose_destinations_docs=self.webpackChunkcompose_destinations_docs||[]).push([[737],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),v=c(t),u=i,m=v["".concat(l,".").concat(u)]||v[u]||d[u]||o;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=v;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},3740:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return v}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],s={sidebar_position:1},l="Basics",c={unversionedId:"navigation/basics",id:"navigation/basics",title:"Basics",description:"To navigate to a destination you need a NavController or a DestinationsNavigator. Both are valid arguments for annotated Composables and will be provided by the library at runtime.",source:"@site/docs/navigation/basics.md",sourceDirName:"navigation",slug:"/navigation/basics",permalink:"/navigation/basics",editUrl:"https://github.com/raamcosta/compose-destinations-docs/tree/main/docs/navigation/basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Non-navigation parameters",permalink:"/destination-arguments/navhost-level-parameters"},next:{title:"Navigating back with a result",permalink:"/navigation/backresult"}},p=[{value:"DestinationsNavigator vs NavController",id:"destinationsnavigator-vs-navcontroller",children:[],level:3},{value:"Avoiding duplicate navigation",id:"avoiding-duplicate-navigation",children:[],level:3}],d={toc:p};function v(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"basics"},"Basics"),(0,o.kt)("p",null,"To navigate to a destination you need a ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),". Both are valid arguments for annotated Composables and will be provided by the library at runtime.\nThen you can:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"navigator.navigate(GreetingScreenDestination)\n\n// OR using NavController.navigateTo extension function\n\nnavController.navigateTo(GreetingScreenDestination)\n")),(0,o.kt)("p",null,"Or if the destination has navigation arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// All arguments will be available in the invoke function, including the default values\nnavigator.navigate(ProfileScreenDestination(id = 1))\n\n// OR\n\nnavController.navigateTo(ProfileScreenDestination(id = 1))\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),' is meant only for navigating from one screen to another. If you need some kind of "top-level" navigation (example: Bottom navigation bar, App drawer, etc) you should use the same ',(0,o.kt)("inlineCode",{parentName:"p"},"NavController")," instance you pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavHost"),"."))),(0,o.kt)("h3",{id:"destinationsnavigator-vs-navcontroller"},"DestinationsNavigator vs NavController"),(0,o.kt)("p",null,"It is good practice to not depend directly on ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController")," on your Composeables. You can opt to use ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," instead, which is an interface wrapper of ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController"),". Making use of this dependency inversion principle allows you to easily pass an empty implementation (one is available already ",(0,o.kt)("inlineCode",{parentName:"p"},"EmptyDestinationsNavigator"),") for previews or testing."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," interface contains the main methods used to navigate that you would use with ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController"),". That said, there are missing APIs, for example, navigating with URI. This seemed rare enough that we did not want to complicate ",(0,o.kt)("inlineCode",{parentName:"p"},"Destinations Navigator"),', but, if you have a use case you consider "common" and there is no way to do it with ',(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),", please open an issue so we can consider adding it. In the meantime, you can always fallback to ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController"),", so you are always covered."))),(0,o.kt)("h3",{id:"avoiding-duplicate-navigation"},"Avoiding duplicate navigation"),(0,o.kt)("p",null,"If you dig around official Compose Samples, you will see this pattern of checking the state of the current ",(0,o.kt)("inlineCode",{parentName:"p"},"NavBackStackEntry")," and only navigating if it is ",(0,o.kt)("inlineCode",{parentName:"p"},"RESUMED"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," can avoid duplicate navigation calls by using this same pattern under the hood if you simply pass ",(0,o.kt)("inlineCode",{parentName:"p"},"onlyIfResumed = true")," to the navigate call like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"navigator.navigate(ProfileScreenDestination(id = 1), onlyIfResumed = true)\n")))}v.isMDXComponent=!0}}]);