"use strict";(self.webpackChunkcompose_destinations_docs=self.webpackChunkcompose_destinations_docs||[]).push([[383],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(t),u=i,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8737:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],s={sidebar_position:7},l="Defining your Navigation Graphs",p={unversionedId:"definingnavgraphs",id:"definingnavgraphs",title:"Defining your Navigation Graphs",description:"In Compose Destinations, we have an interface that defines a navigation graph in its most simple form.",source:"@site/docs/definingnavgraphs.md",sourceDirName:".",slug:"/definingnavgraphs",permalink:"/definingnavgraphs",editUrl:"https://github.com/raamcosta/compose-destinations-docs/tree/main/docs/definingnavgraphs.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Navigation Host Composables",permalink:"/navhosts"},next:{title:"Styles and Animations",permalink:"/stylesandanimations"}},c=[{value:"Generating navigation graphs",id:"generating-navigation-graphs",children:[],level:2},{value:"Manually defining navigation graphs",id:"manually-defining-navigation-graphs",children:[],level:2},{value:"&quot;Vanilla NavHosts&quot;",id:"vanilla-navhosts",children:[],level:2}],d={toc:c};function h(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"defining-your-navigation-graphs"},"Defining your Navigation Graphs"),(0,o.kt)("p",null,"In Compose Destinations, we have an interface that defines a navigation graph in its most simple form.\nHere is what it looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface NavGraphSpec: Direction, Route {\n\n    override val route: String\n\n    val startRoute: Route\n\n    val destinationsByRoute: Map<String, DestinationSpec<*>>\n\n    val nestedNavGraphs: List<NavGraphSpec> get() = emptyList()\n}\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'When running in "single-module" mode, KSP will also generate a ',(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph")," data class\nthat implements the above interface but exposes the generated sealed version of ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationSpec"),"\ninstead."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"By default"),", all your destinations will belong to a ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph"),' we call "root". This ',(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph")," instance will be generated in an object called ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraphs"),". So, you can access it via ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraphs.root")," and you should pass it into ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavHost")," call.\nIn some situations, however, you might want to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Group some of your destinations in nested navigation graphs."),(0,o.kt)("li",{parentName:"ol"},'Have multiple top-level (or "root") navigation graphs, so you can use each one in different ',(0,o.kt)("inlineCode",{parentName:"li"},"DestinationsNavHost")," Composables.")),(0,o.kt)("h2",{id:"generating-navigation-graphs"},"Generating navigation graphs"),(0,o.kt)("p",null,"By default, Compose Destinations reads info from your ",(0,o.kt)("inlineCode",{parentName:"p"},"@Destination")," annotations to build the ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraphs")," object.\nIf you want some screens to be part of a nested navigation graph, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"navGraph")," argument of ",(0,o.kt)("inlineCode",{parentName:"p"},"@Destination")," annotation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Destination(\n    navGraph = "settings",\n    start = true\n)\n@Composable\nfun SettingsScreen() { /*...*/ }\n')),(0,o.kt)("p",null,'All annotated Composables with the same "navGraph" argument will then belong to this navigation graph. You can access its properties with ',(0,o.kt)("inlineCode",{parentName:"p"},"NavGraphs.[yourNavGraphName]"),". You can navigate to the graph itself with ",(0,o.kt)("inlineCode",{parentName:"p"},"destinationsNavigator.navigate(NavGraphs.[yourNavGraphName])"),". "),(0,o.kt)("p",null,'Each navigation graph needs one and only one start destination. A compile check is in place to enforce this. You can define that with the "start" argument (as seen in the above example).'),(0,o.kt)("h2",{id:"manually-defining-navigation-graphs"},"Manually defining navigation graphs"),(0,o.kt)("p",null,"The above approach is simple and works for most apps that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"only have a single ",(0,o.kt)("inlineCode",{parentName:"li"},"DestinationsNavHost")," call"),(0,o.kt)("li",{parentName:"ul"},'don\'t need multiple levels of nested navigation graphs (since each destination can only either belong to the "root" nav graph or belong to a nested nav graph which is a direct child of "root").')),(0,o.kt)("p",null,"If your app has needs that don't align with these restrictions or if you prefer to have more control, you can manually instantiate ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph"),"s which (as shown above) is just a normal data class.\nIf you do this, we recommend having a globally accessible object containing the ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph"),"s since they don't contain any state and you can easily pass them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationNavHost")," calls, check if certain ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," belongs to some graph, get the ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," corresponding to a ",(0,o.kt)("inlineCode",{parentName:"p"},"NavBackStackEntry"),", etc. "),(0,o.kt)("p",null,"That said, you are free to organize them as you prefer. In a big app, it may be better to have multiple of these ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraph"),"s aggregator objects, for example. You can even instantiate this class just as you pass it to ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavHost"),"!"),(0,o.kt)("p",null,"Also, it won't make sense for the library to be generating the ",(0,o.kt)("inlineCode",{parentName:"p"},"NavGraphs")," object anymore. You should disable it adding this into your module's ",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},'ksp {\n    arg("compose-destinations.generateNavGraphs", "false")\n}\n')),(0,o.kt)("p",null,'If you disable this task, Compose Destinations will print some warnings if you are using "navGraph" or "start" in any ',(0,o.kt)("inlineCode",{parentName:"p"},"@Destination")," annotation (since these will be ignored)."),(0,o.kt)("h2",{id:"vanilla-navhosts"},'"Vanilla NavHosts"'),(0,o.kt)("p",null,"Finally, you can opt to not use ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationsNavHost"),". This approach is described in more details ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raamcosta/compose-destinations/wiki/NavHosts#vanilla-navhosts"},"here"),".\nBy doing that, you will be defining the Navigation graphs of the ",(0,o.kt)("inlineCode",{parentName:"p"},"NavHost")," while dealing with arguments, and calling the Composables."),(0,o.kt)("p",null,"In the end, the fact that we included this approach in both sections speaks to why we believe it's not the best approach: you are dealing with multiple concerns and you lose a way to quickly check (both at runtime and by looking at the code) how the Navigation graphs of your app are defined."))}h.isMDXComponent=!0}}]);